#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 07, 2020 03:07:36 PM +03  platform: Windows NT

import sys
import tkinter as tk

import mysql.connector

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import GiveOrderScreen_support





def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = GiveOrderScreen(root)
    GiveOrderScreen_support.init(root, top)
    root.mainloop()


w = None


def create_GiveOrderScreen(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = GiveOrderScreen(w)
    GiveOrderScreen_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_GiveOrderScreen():
    global w
    w.destroy()
    w = None


class GiveOrderScreen:
    def cancelMenuAction(self):
        try:
            selectionxd = self.Scrolledlistbox1.get(self.Scrolledlistbox1.curselection())
            selection = self.Scrolledlistbox1.curselection()
            selection = int(selection[0])
            self.Scrolledlistbox1.delete(selection)
            self.Text1.insert("insert", "Deleted Menu: {}\n".format(selectionxd))

            query = "SELECT  ID  FROM menu WHERE Name= '{}'".format(selectionxd.split("->")[0][:-1])
            self.mycursor.execute(query)
            result = self.mycursor.fetchone()
            j = 0
            for i in self.MenuList:
                if (result[0] == i[0]):
                    self.MenuList.pop(j)
                    break
                else:
                    j = j + 1
        except Exception:
            pass

    def cancelOrderAction(self):
        orderID = self.OrderIdEntry.get()
        self.mycursor.callproc('DinnerTable_Orders_CRUD',
                               ["DELETE", self.SelectedTable[3:], orderID, self.SelectedTable[3:]])
        self.cnx.commit()

        query = "Select Dinners_ID from menu where ID= {}".format(orderID)
        try:
            self.mycursor.execute(query)
            dinnerid = self.mycursor.fetchall()
            for i in dinnerid:
                self.mycursor.callproc('Dinners_Chief_CRUD', ["DELETE", i, 3, 0])
                self.cnx.commit()
        except Exception:
            pass
        query = "select Order_Number from orders_menu where Orders_ID= {}".format(orderID)
        try:
            self.mycursor.execute(query)
            result = self.mycursor.fetchall()
            for i in result:
                self.mycursor.callproc('Orders_Menu_CRUD', ["DELETE", i[0], orderID, 0])
                self.cnx.commit()
        except Exception:
            pass
        self.mycursor.callproc('Orders_CRUD', ["DELETE", orderID, 0, 0])
        self.cnx.commit()
        self.Text1.insert("insert", "Order is cancelled whom ID's {}".format(orderID))

    def giveOrderAction(self):
        try:
            total = 0
            cursor = self.mycursor
            cursor.callproc('Orders_CRUD', ["INSERT", None, 0, 0])
            self.cnx.commit()
            self.mycursor.execute("Select max(id) from orders")
            orderId = self.mycursor.fetchone()
            for i in self.MenuList:
                cursor.callproc('Orders_Menu_CRUD', ["INSERT", None, orderId[0], i[0]])
                query = "select cost from menu where ID= {}".format(i[0])
                cursor.execute(query)
                result = cursor.fetchone()
                total = total + result[0]
            cursor.callproc('Orders_CRUD', ["UPDATE", orderId[0], total, 0])
            self.cnx.commit()

            for i in self.MenuList:
                query = "Select Dinners_ID from menu where ID= {}".format(i[0])
                try:
                    self.mycursor.execute(query)
                    dinnerid = self.mycursor.fetchone()
                    cursor.callproc('Dinners_Chief_CRUD', ["INSERT", dinnerid[0], 3, 0])
                except Exception:
                    pass
            cursor.callproc('DinnerTable_Orders_CRUD',
                            ["INSERT", self.SelectedTable[3:], orderId[0], self.SelectedTable[3:]])
            self.cnx.commit()

            self.Text1.insert("insert", "**** ORDER INFORMATION ****\n")
            self.Text1.insert("insert", "Given Order's Table is: {}\n".format(self.SelectedTable[3:]))
            self.Text1.insert("insert", "Given Order's Id is: {}\n".format(orderId[0]))
            self.Text1.insert("insert", "Order was given successfully\n")

            self.MenuList = []
            self.Scrolledlistbox1.delete(0, tk.END)


        except Exception:
            pass

    def selectTableAction(self):
        try:
            self.SelectedTable = self.TableListBox.get(self.TableListBox.curselection())
            self.Text1.insert("insert", "Selected Table: {}\n".format(self.SelectedTable[3:]))
        except Exception:
            pass

    def selectMenuAction(self):
        try:
            self.SelectedMenu = self.MenuListBox.get(self.MenuListBox.curselection())
            self.Text1.insert("insert", "Selected Menu: {}\n".format(self.SelectedMenu))
            self.Scrolledlistbox1.insert(tk.END, self.SelectedMenu)
            query = "SELECT  ID  FROM menu WHERE Name= '{}'".format(self.SelectedMenu.split("->")[0][:-1])
            self.mycursor.execute(query)
            result = self.mycursor.fetchone()
            self.MenuList.append(result)


        except Exception:
            pass

    def addTablesToMenu(self):
        try:
            cursor = self.mycursor
            cursor.callproc('MENU_CRUD',
                            ["SELECTALL", None, None, None, None, None])
            j = 0
            for i in cursor.stored_results():
                for z in i:
                    self.MenuListBox.insert(j, "{} ->{} ".format(z[3], z[4]))
                    j = j + 1
        except Exception:
            self.Text1.insert("hata")

    def addTablesToList(self):
        try:
            cursor = self.mycursor
            cursor.callproc('DinnerTable_CRUD',
                            ["SELECTALL", None, None, None])
            j = 0
            for i in cursor.stored_results():
                for z in i:
                    self.TableListBox.insert(j, "ID: {}".format(z[0]))
                    j = j + 1
        except Exception:
            self.Text1.insert("hata")

    def __init__(self, top=None):
        with open('database.config', 'r+') as reader:
            line = reader.readline()
            databasename = line.split("\n")[0]
            line = reader.readline()
            username = line.split("\n")[0]
            line = reader.readline()
            password = line.split("\n")[0]

        self.SelectedTable = None
        self.SelectedMenu = None
        self.MenuList = []

        try:
            self.cnx = mysql.connector.connect(user=username, password=password, host="localhost", database=databasename)
            self.mycursor = self.cnx.cursor()
        except Exception:
            print(Exception)
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("800x594+232+48")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("Give Order")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.MenuListBox = ScrolledListBox(top)
        self.MenuListBox.place(relx=0.05, rely=0.051, relheight=0.16
                               , relwidth=0.626)
        self.MenuListBox.configure(background="white")
        self.MenuListBox.configure(disabledforeground="#a3a3a3")
        self.MenuListBox.configure(font="TkFixedFont")
        self.MenuListBox.configure(foreground="black")
        self.MenuListBox.configure(highlightbackground="#d9d9d9")
        self.MenuListBox.configure(highlightcolor="#d9d9d9")
        self.MenuListBox.configure(selectbackground="#c4c4c4")
        self.MenuListBox.configure(selectforeground="black")
        self.MenuListBox.configure(command=self.addTablesToMenu())

        self.OrderButton = tk.Button(top)
        self.OrderButton.place(relx=0.05, rely=0.404, height=34, width=97)
        self.OrderButton.configure(activebackground="#ececec")
        self.OrderButton.configure(activeforeground="#000000")
        self.OrderButton.configure(background="#d9d9d9")
        self.OrderButton.configure(disabledforeground="#a3a3a3")
        self.OrderButton.configure(foreground="#000000")
        self.OrderButton.configure(highlightbackground="#d9d9d9")
        self.OrderButton.configure(highlightcolor="black")
        self.OrderButton.configure(pady="0")
        self.OrderButton.configure(text='''Give Order''')
        self.OrderButton.configure(command=self.giveOrderAction)

        self.OrderIdEntry = ttk.Entry(top)
        self.OrderIdEntry.place(relx=0.188, rely=0.337, relheight=0.035
                                , relwidth=0.27)
        self.OrderIdEntry.configure(takefocus="")
        self.OrderIdEntry.configure(cursor="ibeam")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.05, rely=0.337, height=21, width=104)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Order ID''')

        self.CancelButton = tk.Button(top)
        self.CancelButton.place(relx=0.213, rely=0.404, height=34, width=107)
        self.CancelButton.configure(activebackground="#ececec")
        self.CancelButton.configure(activeforeground="#000000")
        self.CancelButton.configure(background="#d9d9d9")
        self.CancelButton.configure(disabledforeground="#a3a3a3")
        self.CancelButton.configure(foreground="#000000")
        self.CancelButton.configure(highlightbackground="#d9d9d9")
        self.CancelButton.configure(highlightcolor="black")
        self.CancelButton.configure(pady="0")
        self.CancelButton.configure(text='''Cancel Order''')
        self.CancelButton.configure(command=self.cancelOrderAction)

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.05, rely=0.505, relheight=0.444, relwidth=0.605)
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(wrap="word")

        self.TableListBox = ScrolledListBox(top)
        self.TableListBox.place(relx=0.7, rely=0.051, relheight=0.16
                                , relwidth=0.239)
        self.TableListBox.configure(background="white")
        self.TableListBox.configure(disabledforeground="#a3a3a3")
        self.TableListBox.configure(font="TkFixedFont")
        self.TableListBox.configure(foreground="black")
        self.TableListBox.configure(highlightbackground="#d9d9d9")
        self.TableListBox.configure(highlightcolor="#d9d9d9")
        self.TableListBox.configure(selectbackground="#c4c4c4")
        self.TableListBox.configure(selectforeground="black")
        self.TableListBox.configure(command=self.addTablesToList())

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.25, rely=0.0, height=21, width=84)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Menu''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.763, rely=0.0, height=21, width=84)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Table Number''')

        self.SelectMenuButton = tk.Button(top)
        self.SelectMenuButton.place(relx=0.5, rely=0.236, height=34, width=107)
        self.SelectMenuButton.configure(activebackground="#ececec")
        self.SelectMenuButton.configure(activeforeground="#000000")
        self.SelectMenuButton.configure(background="#d9d9d9")
        self.SelectMenuButton.configure(disabledforeground="#a3a3a3")
        self.SelectMenuButton.configure(foreground="#000000")
        self.SelectMenuButton.configure(highlightbackground="#d9d9d9")
        self.SelectMenuButton.configure(highlightcolor="black")
        self.SelectMenuButton.configure(pady="0")
        self.SelectMenuButton.configure(text='''Add Menu''')
        self.SelectMenuButton.configure(command=self.selectMenuAction)

        self.SelectTableButton = tk.Button(top)
        self.SelectTableButton.place(relx=0.75, rely=0.236, height=34, width=97)
        self.SelectTableButton.configure(activebackground="#ececec")
        self.SelectTableButton.configure(activeforeground="#000000")
        self.SelectTableButton.configure(background="#d9d9d9")
        self.SelectTableButton.configure(disabledforeground="#a3a3a3")
        self.SelectTableButton.configure(foreground="#000000")
        self.SelectTableButton.configure(highlightbackground="#d9d9d9")
        self.SelectTableButton.configure(highlightcolor="black")
        self.SelectTableButton.configure(pady="0")
        self.SelectTableButton.configure(text='''Select Table''')
        self.SelectTableButton.configure(command=self.selectTableAction)

        self.CancelMenuButton = tk.Button(top)
        self.CancelMenuButton.place(relx=0.838, rely=0.421, height=34, width=97)
        self.CancelMenuButton.configure(activebackground="#ececec")
        self.CancelMenuButton.configure(activeforeground="#000000")
        self.CancelMenuButton.configure(background="#d9d9d9")
        self.CancelMenuButton.configure(cursor="fleur")
        self.CancelMenuButton.configure(disabledforeground="#a3a3a3")
        self.CancelMenuButton.configure(foreground="#000000")
        self.CancelMenuButton.configure(highlightbackground="#d9d9d9")
        self.CancelMenuButton.configure(highlightcolor="black")
        self.CancelMenuButton.configure(pady="0")
        self.CancelMenuButton.configure(text='''Cancel Menu''')
        self.CancelMenuButton.configure(command=self.cancelMenuAction)

        self.Scrolledlistbox1 = ScrolledListBox(top)
        self.Scrolledlistbox1.place(relx=0.7, rely=0.505, relheight=0.429
                                    , relwidth=0.276)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
